<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_deck</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-190</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// initialize everything

// initiate all cards by image_index(guide: script_cards)
for (i = 0; i &lt;1500; i +=1){
    global.card[i] = i
}

global.mana_player = 0
global.mana_opponent = 0

if x &lt; 1000 // opponents deck
{
    deck_type = "opponent"
    image_index = 1
} 
else // players deck
{
    deck_type = "player"
} 

card_picked = false // used when drawing a card
cards_set = false // for placing shields/hand
deck_size = 0 // deck is currently empty
scr_set_deck()


// prevent game from crashing if deck empty
if (deck_size = 0) or (deck_size &lt; 10) // not enough in deck to place shields/hand
{
    msg = instance_create(x,y,obj_message)
    msg.type = "ERROR"
    msg.text = deck_type +" deck is empty."
    exit
}

if (deck_size &gt; 0 and deck_size &lt; 40) 
{
    msg = instance_create(x,y,obj_message)
    msg.type = "WARNING"
    msg.text = deck_type +" deck contains less than 40 cards."
}

// set all cards in deck to not taken
for (i = 1; i &lt;= deck_size; i++){
    card_taken[i] = false
}

image_speed = 0
choose_card = 0

current_deck_size = deck_size // set the current deck size to the max size

place_cards = 10 // 5 shields, 5 cards in hand
x3 = 0 // spacing for shields
y3 = 0
x4 = 0 // start x for hand

// start x position of cards in hand
player_start_x = x-235
opponent_start_x = x+235

name_width = string_width(deck_type)/2 // used for drawing deck name

event_user(0) // place shields &amp; hand

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_user(0) places shields/hand</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
obj = instance_create(x,y,obj_select_card)

obj.deck_size = deck_size

// give the deck to the select card object
for(i = 1; i &lt;= deck_size; i++)
{obj.card[i] = card[i]}

global.current_deck = id // set the global to the id of this deck
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>403</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>-1</relative>
        <isnot>-1</isnot>
        <arguments>
          <argument>
            <kind>10</kind>
            <object>obj_card</object>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw a card!

card_picked = false

if current_deck_size &lt;= 0 // if deck is empty
{
    log_text("DECK EMPTY")
    
    msg = instance_create(x,y,obj_message)
    msg.text = "DECK IS EMPTY!#"+deck_type +string(" loses.")
    msg.type = "WARNING"

}
else // if deck is not empty
{

    while (card_picked = false) // start loop for picking card
    {
        choose_card = irandom_range(1,deck_size)
    
        if card_taken[choose_card] == false // if a card has been picked
        {
            create_card = instance_create(x-10,y+10,obj_card)
            create_card.depth = obj_mouse.depth_count
            obj_mouse.depth_count -= 1 // add to the depth count for card layers
            obj_mouse.grabbed_card = true
            create_card.follow_mouse = true // get the card to follow mouse when created
            create_card.belongsto = deck_type // set card owner
            create_card.image_xscale = -1 // keep the card faced down until it's dropped
            create_card.face_down = true
            create_card.close_deck = id
            create_card.stack_id = choose_card // give card the number it was in the deck (incase added back to deck)
            card_taken[choose_card] = true // remove a card from deck
            current_deck_size -= 1 
        
            scr_cards() // determine what card it is (number the card) 
            
            log_text(deck_type + " drew a card ["+string(global.card[create_card.image_index])+string("]"))
            
            card_picked = true // break the loop

        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// flip sides (called by obj_swap_turn)

distance_to_center_x = x - global.center_x
distance_to_center_y = y - global.center_y

x -= (distance_to_center_x * 2)
y -= (distance_to_center_y * 2)

// prevents alignment problem
if y &lt; global.center_y // opponent side
{
    image_index = 1
    y += 40
}
else
{
    image_index = 0
    y += 40
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// placing shields and drawing cards

while (cards_set = false)
{
    choose_card = irandom_range(1,deck_size)
    
    if card_taken[choose_card] = false // if card is chosen
    {
        if place_cards &gt; 5 // cards as shields
        {
            if deck_type = "player" {x3 -= 235} else {x3 += 235}
            
            create_card = instance_create(x+x3,y,obj_card)
            create_card.face_down = true
            create_card.image_xscale = -1 // stops card from flipping itself
        }
        
        if place_cards &gt; 0 and place_cards &lt;= 5 // cards in hand
        {
            if deck_type = "player" {x4 -= 235; y3 = 760} else {x4 += 235; y3 = -760}
            create_card = instance_create(x+x4,y+y3,obj_card)
            create_card.face_down = false
        }
        
        create_card.belongsto = deck_type
        create_card.close_deck = id
        card_taken[choose_card] = true
        create_card.stack_id = choose_card // give card the number it was in the deck (incase added back to deck)
        current_deck_size -= 1
        
        place_cards -= 1
        
        scr_cards() // set card numbers and images
    }
    
    if place_cards = 0 {cards_set = true} // break the loop
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,image_angle,image_blend,image_alpha)

// draw the deck name if mouse hover
if global.hide_zones = false
{
    if position_meeting(mouse_x,mouse_y,self)
    {
        scr_text_style_1()
        draw_set_font(font_arial_xxlarge) 
        
        draw_sprite_stretched(spr_deck_title_bg,0,x-name_width-12,y-154,name_width*2+24,string_height(deck_type)+8)
        draw_text(x,y-130,deck_type)
    }
}


// show the deck size if 10 cards or less
if current_deck_size &lt;= 8
{
    scr_text_style_1()
    draw_set_colour(c_red)
    draw_set_font(font_arial_xxxlarge)
    draw_text(x,y-40,current_deck_size)
}

// show the deck size in debug mode
if global.debug = true
{
    scr_text_style_1()
    draw_set_font(font_arial_xxlarge)
    draw_text(x,y-130,deck_type)
    draw_set_font(font_arial_xxxlarge)
    draw_text(x,y-40,current_deck_size)
    
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>111,183</point>
    <point>184,184</point>
  </PhysicsShapePoints>
</object>
