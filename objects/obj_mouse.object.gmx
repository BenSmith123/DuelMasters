<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
mouse_hover_text = ""

grabbed_card = false
full_size = false

num = 0 // num of objects in stack
object_chosen = 0 // object that has the lowest depth (on top)
lowest_depth = 0 // lowest depth out of all the objects
depth_count = -201

// size of the text box
if room = room_settings {full_size = false}
if room = room_play {full_size = true}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// card picking algorithm

x = round(mouse_x)
y = round(mouse_y)


if position_meeting(mouse_x,mouse_y,obj_card)
{
    if mouse_check_button_pressed(mb_left)
    {
        for(i = 0; i &lt; num; i++)
        {
            if card_stack[i].depth &lt; lowest_depth // sort through the number of objects in the stack
            {
                lowest_depth = card_stack[i].depth // save the lowest depth
                object_chosen = card_stack[i] // and the object ID
            }
        }

        with (object_chosen) {event_user(0)} // call the card event (move to mouse etc)
    }
    
}









/*
{
    if not (card = 0){
        if grabbed_card = false
        {
            card.follow_mouse = true
            card.tapped = false
            card.depth = depth_count
            grabbed_card = true
            depth_count -= 1 // add to the depth count for card layers
            card.temp_state = card.state // set the previous state before its moved (for logging)
            
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// reset all variables used in card stack
num = 0
object_chosen = 0
lowest_depth = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>


if global.show_hints = true
{
    
    mouse_hover_text = ""

    if position_meeting(x,y,obj_dice)
    {mouse_hover_text = "Click to roll dice (destroying random cards, etc.)"}

    if position_meeting(x,y,obj_coin)
    {mouse_hover_text = "Click to flip coin#(who goes first)"}
    
    if position_meeting(x,y,obj_deck)
    {mouse_hover_text = "Right Click to pick card from deck"}
    
    if position_meeting(x,y,obj_log)
    {mouse_hover_text = "Click to open/close"}
    
    // draw the hover and text
    if not (mouse_hover_text  = "")
    {
        scr_text_style_1()
        draw_set_valign(fa_center)
        draw_set_font(font_arial_xlarge)
        draw_sprite(spr_mouse_info_small,0,x,y)
        draw_text_ext(mouse_x,mouse_y-76,mouse_hover_text,40,300)
    }

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>107,150</point>
    <point>150,150</point>
  </PhysicsShapePoints>
</object>
