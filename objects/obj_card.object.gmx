<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_back</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-200</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_back</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
image_speed = 0

follow_mouse = false
tapped = false
face_down = true
belongsto = "-" // set by deck (used in log text)
angle_2 = 0 // used when card should be upside down

state = "" // Hand, Mana, Shield, Battle
temp_state = "DECK" // temporary state for showing its movement

close_deck = 0 // set by deck that created it

query_obj = 0 // object that asks if card should go back to deck

stack_id = 0 // what number the card was in the deck (set by obj_deck)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
with (fx) instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if follow_mouse = true
{
    x = mouse_x
    y = mouse_y
}

/*
card_touch = place_meeting(x,y,obj_card)
if card_touch.depth &lt; depth {pick_me = false} 

if not place_meeting(x,y,obj_card) {pick_me = true}




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if follow_mouse = true // stops from effecting other cards not being moved
{

    if state = "MANA"
    {
        tapped = false
        face_down = false
        scr_card_fx(0)
        if not (temp_state = state) // if card was not already in mana
        {
            if belongsto = "player" // add count to player or opponent mana
            {global.mana_player += 1} 
            else 
            {global.mana_opponent += 1}
        } 
    }
    
    if temp_state = "MANA" // if the card was in mana
    {
        if not (state = "MANA") // but now isnt in mana
        {
            if belongsto = "player" // remove count from mana
            {global.mana_player -= 1}
            else
            {global.mana_opponent -= 1}
        }
    }
    
    if state = "BATTLEZONE"
    {
        tapped = false
        face_down = false
        image_angle = 0
        scr_card_fx(2)
    }
    
    if state = "SHIELDS"
    {
        tapped = false
        face_down = true
        image_angle = 0
        scr_card_fx(1)
        
        // ask if card should be added back to the deck
        if (y &lt; global.center_y) // if on opponent side
        {
            if x &lt; close_deck.x+36
            {if query_obj = 0 {event_user(2)}} 
        }
        else
        {
            if x &gt; close_deck.x-36
            {if query_obj = 0 {event_user(2)}} 
        }
    }
    
    if state = "HAND"
    {
        face_down = false
        tapped = false
        image_angle = 0
    }
    
    if state = "GRAVEYARD"
    {
        face_down = false
        tapped = false
        image_angle = 0
        scr_card_fx(3)
    }
    
    // auto align card
    if global.auto_align = true
    {
        if state = "HAND" {if y &lt; global.center_y {y = 230} else {y = 2890}}
        if state = "MANA" {if y &lt; global.center_y {y = 610} else {y = 2510}}
        if state = "SHIELDS" {if y &lt; global.center_y {y = 990} else {y = 2130}}
        if state = "BATTLEZONE" {if y &lt; global.center_y {y = 1370} else {y = 1750}}
    }
    
    
    // log text if card place has actually moved
    if not (temp_state = state)
    {log_text(belongsto +" moved card " + "[" + string(image_index) + "] from "  +string_lower(temp_state) + " to " +string_lower(state))}

}

follow_mouse = false
obj_mouse.grabbed_card = false

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (state = "MANA" or state = "BATTLEZONE"){

    if tapped = true
    {
        tapped = false
        log_text(belongsto +" untapped card " + "[" + string(image_index) + "]")
    }
    else
    {
        tapped = true
        log_text(belongsto +" tapped card " + "[" + string(image_index) + "]")
    }
}

if state = "SHIELDS"
{
   
    if face_down = true
    {
        face_down = false
        //image_xscale += 0.2
        exit
    }
    else
    {
        face_down = true
        //image_xscale -= 0.2
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if not (position_meeting(mouse_x,mouse_y,query_obj))
{
    if not (position_meeting(mouse_x,mouse_y,obj_card_to_deck_no))
    {
        obj_mouse.card_stack[obj_mouse.num] = id
        obj_mouse.num += 1
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ask for card to be added back to deck

query_obj = instance_create(x,y,obj_card_to_deck)
query_obj.card = id
query_obj.depth = depth-1

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// flip sides (called by obj_swap_turn)

distance_to_center_x = x - global.center_x
distance_to_center_y = y - global.center_y

x -= (distance_to_center_x * 2)
y -= (distance_to_center_y * 2)

// prevents alignment problem
if y &lt; global.center_y // opponent side
{y += 40}
else
{y += 40}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if obj_mouse.grabbed_card = false
{
    follow_mouse = true
    tapped = false
    depth = obj_mouse.depth_count
    obj_mouse.grabbed_card = true
    obj_mouse.depth_count -= 1 // add to the depth count for card layers
    temp_state = state // set the previous state before its moved (for logging)
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// set the state of the card depending on its position


if y &lt; global.hand_height {state = "HAND"}

if y &gt; global.hand_height and y &lt; global.hand_height+global.mana_height {state = "MANA"}

if y &gt; global.hand_height+global.mana_height and y &lt; global.hand_height+global.mana_height+global.shield_height
{
    state = "SHIELDS"
    
    if y &lt; global.center_y // check if card is in graveyard not shields
    {
        if x &lt; close_deck.x-36 // slide the card off the deck
        {
            state = "GRAVEYARD"
            if x &gt; close_deck.x-240
            {x -= 12} // slide card off
        }  
    }
}

if y &gt; global.hand_height+global.mana_height + global.shield_height and y &lt; global.hand_height+global.mana_height+global.shield_height + global.battle_zone 
{state = "BATTLEZONE"}

if y &gt; global.hand_height+global.mana_height + global.shield_height + global.battle_zone and y &lt; global.hand_height+global.mana_height + global.shield_height + global.battle_zone + global.shield_height
{
    state = "SHIELDS"

    if y &gt; global.center_y // check if card is in graveyard not shields
    {
        if x &gt; close_deck.x+36 // if card is in graveyard but touching deck
        {
            state = "GRAVEYARD"
            if x &lt; close_deck.x+240
            {x += 12} // slide card off
        }
    }
}

if y &gt; global.hand_height+global.mana_height + global.shield_height + global.battle_zone + global.shield_height and y &lt; global.hand_height+global.mana_height + global.shield_height + global.battle_zone + global.shield_height + global.mana_height
{state = "MANA"}
    
if y &gt; global.hand_height+global.mana_height + global.shield_height + global.battle_zone + global.shield_height + global.mana_height and y &lt; global.hand_height+global.mana_height + global.shield_height + global.battle_zone + global.shield_height + global.mana_height+global.hand_height
{state = "HAND"}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw the card &amp; its border
x = round(x)
y = round(y)


// mouse hover effect
if position_meeting(mouse_x,mouse_y,self) 
{draw_sprite_ext(spr_card_hover,0,x,y,image_xscale,image_yscale,image_angle,image_blend,image_alpha)}


// set cards upside down depending on their position to center y
if (state = "MANA" and y &gt; global.center_y)
or (state = "SHIELDS" and y &lt; global.center_y)
{angle_2 = 180}
else
{angle_2 = 0}

if follow_mouse = true {image_angle = 0; angle_2 = 0} // set normal when being carried by mouse


// animated tapping
if tapped = true {if not (image_angle = -90)    {image_angle -= 22.5}}
else {if not (image_angle = 0)                  {image_angle += 22.5}}


// animated card flippimg
if face_down = true {if not (image_xscale = -1) {image_xscale -= 0.25}}
else {if not (image_xscale = 1)                 {image_xscale += 0.25}}


// SPRITE DRAWING
// card border
draw_sprite_ext(spr_border,0,x,y,image_xscale,image_yscale,image_angle-angle_2,image_blend,image_alpha) 

// card faced down
if (image_xscale &lt; 0) {draw_sprite_ext(spr_back,image_index,x,y,image_xscale,image_yscale,image_angle-angle_2,image_blend,image_alpha)}
else // CARD SPRITE
{draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,image_angle-angle_2,image_blend,image_alpha)}


// display debug information
if global.debug = true
{
    scr_text_style_1()
    draw_set_font(font_arial_xlarge)    
    draw_sprite(spr_debug_bg,0,x,y-100)
    draw_text(x,y-120,"Card no. "+string(global.card[image_index]))
    draw_text(x,y-80,"(" + state + ")")
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>100,144</point>
    <point>144,144</point>
  </PhysicsShapePoints>
</object>
